from datetime import datetime, timedelta, timezone
from telegram import Update, ChatPermissions
from telegram.ext import ContextTypes
from telegram.constants import ChatMemberStatus
import logging
from .admin import is_admin

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
from config import (
    FORBIDDEN_WORDS,
    SPAM_MESSAGE_LIMIT,
    SPAM_TIME_WINDOW_SECONDS,
    SPAM_MUTE_DURATION_HOURS,
    bot_state
)

async def check_for_spam(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–ø–∞–º. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω —Å–ø–∞–º."""
    user = update.effective_user
    if not user: return False

    user_id = user.id
    chat_id = update.effective_chat.id
    now = datetime.now()

    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if 'user_messages' not in context.chat_data:
        context.chat_data['user_messages'] = {}

    user_messages = context.chat_data['user_messages']
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫ (timestamp) –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—â–µ –Ω–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ, –¥–ª—è –Ω–µ–≥–æ —Å–æ–∑–¥–∞—Å—Ç—Å—è –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫.
    timestamps = user_messages.get(user_id, [])

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ø–∏—Å–æ–∫: —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Ç–æ–ª—å–∫–æ "—Å–≤–µ–∂–∏–µ" —Å–æ–æ–±—â–µ–Ω–∏—è.
    recent_timestamps = [ts for ts in timestamps if (now - ts).total_seconds() < SPAM_TIME_WINDOW_SECONDS]

    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
    recent_timestamps.append(now)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ.
    user_messages[user_id] = recent_timestamps

    # --- –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ---
    logging.info(
        f"[SPAM CHECK] User: {user.username} ({user_id}) | "
        f"Messages in window: {len(recent_timestamps)}/{SPAM_MESSAGE_LIMIT}"
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ª–∏–º–∏—Ç.
    if len(recent_timestamps) >= SPAM_MESSAGE_LIMIT:
        try:
            await context.bot.restrict_chat_member(
                chat_id=chat_id,
                user_id=user_id,
                permissions=ChatPermissions(can_send_messages=False),
                until_date=datetime.now(timezone.utc) + timedelta(hours=SPAM_MUTE_DURATION_HOURS)
            )
            await context.bot.send_message(
                chat_id=chat_id,
                text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.username} –±—ã–ª –∑–∞–≥–ª—É—à–µ–Ω –Ω–∞ {SPAM_MUTE_DURATION_HOURS} —á–∞—Å–æ–≤ –∑–∞ —Å–ø–∞–º."
            )
            # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π —Å–ø–∞–º–µ—Ä–∞ –ø–æ—Å–ª–µ –Ω–∞–∫–∞–∑–∞–Ω–∏—è
            user_messages[user_id] = []
            return True
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å –º—É—Ç –∑–∞ —Å–ø–∞–º (–≤–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –Ω–µ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞): {e}")

    return False

async def delete_forwarded_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª—è–µ—Ç –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    message = update.effective_message
    user = update.effective_user
    if not message or not user: return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if await is_admin(update, context):
        return

    try:
        await message.delete()
        username = user.username or user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        await context.bot.send_message(
        chat_id=message.chat_id,
        text=f"üö´ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {username} —É–¥–∞–ª–µ–Ω–æ (–ø–µ—Ä–µ—Å—ã–ª–∫–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–∞).",
        disable_notification=True
    )
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

async def filter_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–§–∏–ª—å—Ç—Ä—É–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–Ω–æ–≤—ã–µ –∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)."""
    message = update.effective_message
    user = update.effective_user

    if not message or not user or not message.text:
        return

    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤ —á–∞—Ç–∞—Ö —Å –Ω–æ—á–Ω—ã–º —Ä–µ–∂–∏–º–æ–º (—Ç–∞–º —Å–≤–æ–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è)
    if message.chat_id in bot_state.night_mode_chats:
        return

    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if await is_admin(update, context):
        return

    '''is_spam = await check_for_spam(update, context)
    if is_spam:
        return'''

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º
    if await check_for_spam(update, context):
        try:
            await message.delete()
        except:
            pass  # –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–æ
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
    if any(word in message.text.lower() for word in FORBIDDEN_WORDS):
        try:
            await message.delete()
            await context.bot.send_message(
                chat_id=message.chat_id,
                text=f"üö´ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{user.username} —É–¥–∞–ª–µ–Ω–æ, —Ç.–∫. —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ.",
                disable_notification=True
            )
            return
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–º —Å–ª–æ–≤–æ–º: {e}")
            return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ —Å—Å—ã–ª–∫–∏
    if message.entities and any(e.type in ['url', 'text_link'] for e in message.entities):
        try:
            await message.delete()
            await context.bot.send_message(
                chat_id=message.chat_id,
                text=f"üö´ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{user.username} —É–¥–∞–ª–µ–Ω–æ (—Å—Å—ã–ª–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω—ã).",
                disable_notification=True
            )
            return
        except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Å—ã–ª–∫–æ–π: {e}")
